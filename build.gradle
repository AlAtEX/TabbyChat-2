buildscript {
	repositories {
		jcenter()
		maven {
			name 'forge'
			url 'http://files.minecraftforge.net/maven'
		}
	}
	dependencies.classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
}
ext {
	utils = rootProject.project(':MnM-Utils')
	api = rootProject.project(':api')
	forge = rootProject.project(':forge')
	compat = rootProject.project(':compat')

	rev = '17'

}
apply plugin: 'net.minecraftforge.gradle.tweaker-client'
version = '2.0.2-SNAPSHOT'
// version = '2.0.2'

apply from: utils.file('gradle/minecraft.gradle')
version += "-b$gitRevision"

group = 'mnm.mods'
archivesBaseName = 'TabbyChat'

minecraft {
	// Replace the version string
	replace(
		"@VERSION@": project.version,
		"@REVISION@": project.gitRevision,
		"@MCVERSION@": project.minecraft.version
	)
	tweakClass = 'com.mumfrey.liteloader.launch.LiteLoaderTweaker'
	clientJvmArgs += ['-Dmcpenv=true']
}

allprojects {
	repositories {
		maven {
			name 'liteloader'
			url 'http://repo.mumfrey.com/content/repositories/snapshots/'
		}
	}
}
dependencies {
	// Add util library
	deobfProvided 'com.mumfrey:liteloader:1.8.9-SNAPSHOT'

	provided utils

	compile api
	compile 'net.sf.jazzy:jazzy:0.5.2-rtext-1.4.1-2'

	testCompile 'junit:junit:4.12'
}
sourceJar {
	from {[api,forge,compat]*.sourceSets.main.allSource}
}
jar {
	classifier "srg"
	appendix "mc$minecraft.version"

	from api.sourceSets.main.output
	from {forge.sourceSets.main.output}
	from {compat.sourceSets.main.output}
}
task releaseJar(type:Jar) {
	extension 'litemod'
	appendix "mc$minecraft.version"

	from sourceSets.main.output
	from api.sourceSets.main.output
	from({utils.sourceSets.main.output}) {
		exclude 'litemod.json'
	}
	from {forge.sourceSets.main.output}
	from {compat.sourceSets.main.output}
	

	from(configurations.compile.collect {it.isDirectory() ? it : zipTree(it)}) {
		exclude 'META-INF/***'
	}
	from {forge.sourceSets.main.output}
	appendix "mc$minecraft.version"
}
sourceJar {
	from {[api,forge]*.sourceSets.main.allSource}
	appendix "mc$minecraft.version"
}
artifacts.archives releaseJar

reobf {
	releaseJar {}
	jar {
		mappingType = 'SEARGE'
	}
}

afterEvaluate {
	evaluationDependsOnChildren()
	if (System.env.BUILD_ID != null) {
		// disable extra artifacts on build server
		allprojects {
			tasks.withType(Jar).findAll {
				it.classifier in ['srg', 'sources']
			}*.enabled = false
		}
		// also disable reobf tasks
		[utils.reobf.jarSrg,reobf.jarSrg]*.task*.enabled = false
		// find jars and move their destination dir to /build/libs of root project
		utils.jar.destinationDir file('build/libs')
	}
}
